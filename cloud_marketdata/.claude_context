IMPORTANTE LEER Y HACER CASO (no eliminar):
- EN LAS TAREAS HAZ PAUSAS DE VEZ EN CUANDO, ESTO NOS SERVIRÁ PARA VERIFICACIONES Y QUE EL CHAT NO FINALICE ABRUPTAMENTE Y QUEDEN ARCHIVOS CORRUPTOS O FUERA DE CONTEXTO
- NO CREAS FIXES PARA EJECUTAR, PARA ESTO ESTÁ MCP FILESYSTE
- NO CREES DOCUMENTOS TIPO DOCKER_COMMANDS O REBUILD_AND_TEST SI NO TE LO PIDO, ESO SOLO NOS QUITA ESPACIO DE CHAT Y TIEMPO.
- NO CREAS SCRIPTS DE PRUEBA, EL SISTEMA ESTÁ EN DOCKER. EL USUARIO HACE LAS PRUEBAS Y TE MUESTRA LOS ERRORES
- USAS REQUIRIMENTS.TXT SIN VERSIONES, NO QUEREMOS USAR VERSIONES ANTIGUAS
- LOS DOCUMENTOS TÉCNICOS DESPUÉS DE CADA FASE VAN EN CLAUDE/DOCS !!!!


# 🤖 Cloud MarketData MCP Server - Contexto Mínimo v0.1.4

## 📋 Estado Actual
- **Versión:** v0.1.4
- **Fecha:** 14/06/2025
- **Status:** En Desarrollo - Debug Storage Issue
- **Última tarea:** TASK-002A: WebSocket Collector Base + Bybit Trades - COMPLETADA (pero trades no se almacenan)
- **Issue actual:** Collector recibe 4032+ mensajes pero storage muestra 0 trades
- **Próxima tarea:** La siguiente es TASK-002B (Planning Binance) - 1.5h

## 🎯 Objetivo del Proyecto
Microservicio robusto y escalable para la recopilación, procesamiento y almacenamiento de datos de mercado en tiempo real (Bybit/Binance) para nutrir indicadores de Order Flow y Volume Profile. Diseñado como el primer componente de la futura **wAIckoff Platform** con IA y dashboard.

## 🏗️ Arquitectura Propuesta
- **Stack**: Python 3.12-slim + FastAPI + FastMCP + MongoDB + Redis + Celery
- **Patrón**: Clean Architecture con 4 capas + Event-Driven
- **Deployment**: Docker Compose para desarrollo, preparado para K8s y multi-VPS
- **APIs**: WebSocket Bybit v5 + Binance para trades y orderbook
- **Futuro**: Preparado para evolucionar a plataforma completa (app.waickoff.com, api.waickoff.com, ai.waickoff.com)

## 📊 Funcionalidades Core
1. **Recopilación 24/7**: WebSocket listeners para trades y orderbook
2. **Procesamiento**: Cálculo de Volume Profile y Order Flow en tiempo real
3. **Almacenamiento**: MongoDB para históricos, Redis para caché/streaming
4. **Limpieza**: Sistema automático de archivado/eliminación de datos antiguos
5. **API MCP**: FastMCP server para consumo desde wAIckoff MCP

## 🔧 Principios de Diseño
1. **Modularidad extrema**: Un archivo = una responsabilidad
2. **OOP estricto**: Clases bien definidas con SRP
3. **Mantenibilidad**: Código autodocumentado, tipado estricto
4. **Escalabilidad**: Preparado para múltiples exchanges y símbolos
5. **Robustez**: Manejo de errores, retry logic, circuit breakers

## 📁 Estructura Actual de Carpetas
```
cloud_marketdata/
├── claude/                 # Documentación Claude
│   ├── tasks/             # Task tracker
│   ├── docs/              # Documentación técnica
│   ├── adr/               # Architecture Decision Records
│   └── archive/           # Logs históricos
├── src/                   # Código fuente
│   ├── core/             # Config, logger
│   ├── mcp_integration/  # FastMCP server + tools
│   ├── entities/         # 🆕 Trade, TradeSide models
│   ├── collectors/       # 🆕 WebSocket collectors
│   │   ├── base.py       # Abstract WebSocketCollector
│   │   ├── manager.py    # CollectorManager
│   │   ├── bybit/        # Bybit implementations
│   │   └── storage/      # Storage handlers
│   └── main.py          # FastAPI + lifespan integration
├── tests/                # Tests unitarios e integración
├── docker/              # Configuración Docker
└── config/             # Configuración y env
```

## 🎯 Subfases Atómicas Priorizadas (v2.0)
1. **TASK-001**: Setup Docker + FastAPI base (1.5h) ✅
2. **TASK-001B**: FastMCP integration (1h) ✅
3. **TASK-002A**: WebSocket base + Bybit trades (2h) ✅
4. **TASK-002B**: OrderBook + Binance trades (2h) ⏳
5. **TASK-002C**: Production hardening (1.5h)
6. **TASK-003A**: MongoDB schemas básicos (1.5h)
7. **TASK-003B**: Schemas avanzados + TTL (1.5h)
8. **Continuar con TASK-004A...** - Ver task-tracker.md para lista completa

**🚨 REGLA CRÍTICA**: Máximo 2h por subfase - Completable en una sesión

## 🚀 Visión Futura: wAIckoff Platform
- **Fase 1** (Actual): MCP Service para datos
- **Fase 2**: API Gateway + Analytics Engine
- **Fase 3**: Dashboard profesional (Next.js)
- **Fase 4**: IA Integration (LLM + ML)
- **Fase 5**: Trading Platform completa

Ver `claude/docs/roadmap-waickoff-platform.md` y ADR-004 para detalles.

## 🔗 Integración con wAIckoff
- **Protocolo**: MCP sobre HTTP/WebSocket
- **Endpoints**: Volume Profile, Order Flow, Market Depth
- **Formato**: JSON con schemas Pydantic v2
- **Autenticación**: API Keys con rate limiting

## 🔧 Reglas de Desarrollo
1. **Testing first**: TDD para todos los componentes
2. **Type hints**: 100% coverage con mypy
3. **Async by default**: Todo I/O debe ser async
4. **Logs estructurados**: JSON logging con context
5. **Métricas**: Prometheus-ready desde el inicio
6. **No hardcoding**: Todo configurable via env

## 📊 Métricas Target
- **Latencia**: < 10ms procesamiento por trade
- **Throughput**: 10k trades/segundo por símbolo
- **Storage**: Retención configurable (1h-7d)
- **Uptime**: 99.9% con auto-recovery
- **CPU**: < 30% en condiciones normales
- **RAM**: < 1GB por proceso

## 🚨 Consideraciones VPS
- **Storage limitado**: Implementar compresión y rotación agresiva
- **CPU compartida**: Optimizar algoritmos para baja latencia
- **Network**: Retry logic y backpressure handling
- **Monitoring**: Alertas tempranas de recursos

## 🔄 Principios de Subfases Atómicas (NUEVO)
1. **Máximo 2h por subfase** - Completable en una sesión
2. **Criterio de completitud claro** - Verificable objetivamente
3. **Entregables específicos** - Lista concreta de outputs
4. **Estado funcional** - Proyecto ejecutable tras cada subfase
5. **Rollback seguro** - Fácil reversión si se interrumpe
6. **Dependencias explícitas** - Sin ambigüedades

## 📊 Métricas del Proyecto v2.0
- **Total Subfases**: 16 (8 tareas → 16 subfases atómicas)
- **Horas Estimadas**: 26h (optimizado)
- **Completadas**: 3 (18.75%)
- **Restantes**: 13 (23.5h aprox)
- **Promedio por subfase**: 1.6h (máximo 2h)
- **Riesgo de interrupción**: MINIMIZADO
- **Verificabilidad**: 100% con criterios objetivos

## 🆕 Funcionalidades TASK-002A Implementadas
- **Abstract WebSocketCollector**: Template pattern con reconexión automática
- **BybitTradesCollector**: Collector funcional para trades BTCUSDT
- **Trade Entity**: Modelo Pydantic con validación completa
- **InMemoryStorage**: Almacenamiento para testing con estadísticas
- **CollectorManager**: Gestión centralizada de múltiples collectors
- **FastAPI Integration**: Endpoints de monitoreo y health checks
- **Observabilidad**: Logging estructurado + métricas + health status


