# Cloud MarketData MCP Server - Makefile
# Professional development commands for Docker-based workflow

.PHONY: help build up down logs restart shell test clean dev prod

# Default target
help: ## Show this help message
	@echo "Cloud MarketData MCP Server - Development Commands"
	@echo "=================================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

# Development Commands
up: ## Start all services in background
	@echo "🚀 Starting Cloud MarketData services..."
	docker-compose up -d
	@echo "✅ Services started. Use 'make logs' to see output."

dev: ## Start all services including development tools
	@echo "🛠️  Starting development environment..."
	docker-compose --profile dev up -d
	@echo "✅ Development environment ready:"
	@echo "   - App: http://localhost:8000"
	@echo "   - MongoDB Express: http://localhost:8082"
	@echo "   - Redis Commander: http://localhost:8081"

down: ## Stop all services
	@echo "🛑 Stopping all services..."
	docker-compose down
	@echo "✅ Services stopped."

restart: down up ## Restart all services

logs: ## Show logs from all services
	docker-compose logs -f

logs-app: ## Show logs from application service only
	docker-compose logs -f app

# Build Commands
build: ## Build application image
	@echo "🔨 Building application image..."
	docker-compose build app
	@echo "✅ Build completed."

rebuild: ## Force rebuild without cache
	@echo "🔨 Force rebuilding application image..."
	docker-compose build --no-cache app
	@echo "✅ Rebuild completed."

# Development Tools
shell: ## Access application container shell
	docker-compose exec app /bin/bash

shell-mongo: ## Access MongoDB shell
	docker-compose exec mongodb mongosh cloud_marketdata

shell-redis: ## Access Redis CLI
	docker-compose exec redis redis-cli

# Testing Commands
test: ## Run tests inside container
	@echo "🧪 Running tests..."
	docker-compose exec app python -m pytest -v
	@echo "✅ Tests completed."

test-cov: ## Run tests with coverage
	@echo "🧪 Running tests with coverage..."
	docker-compose exec app python -m pytest --cov=src --cov-report=html
	@echo "✅ Tests with coverage completed."

# Health Checks
health: ## Check application health
	@echo "🏥 Checking application health..."
	@curl -s http://localhost:8000/health | python -m json.tool || echo "❌ Application not responding"

ping: ## Ping application
	@echo "📡 Pinging application..."
	@curl -s http://localhost:8000/ping | python -m json.tool || echo "❌ Application not responding"

# Maintenance Commands
clean: ## Clean up containers, images, and volumes
	@echo "🧹 Cleaning up Docker resources..."
	docker-compose down -v
	docker system prune -f
	@echo "✅ Cleanup completed."

clean-all: ## Clean everything including images
	@echo "🧹 Deep cleaning Docker resources..."
	docker-compose down -v --rmi all
	docker system prune -a -f
	@echo "✅ Deep cleanup completed."

# Production Commands
prod: ## Start production environment
	@echo "🚀 Starting production environment..."
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
	@echo "✅ Production environment started."

# Monitoring Commands
stats: ## Show container resource usage
	docker stats

ps: ## Show running containers
	docker-compose ps

# Database Commands
db-reset: ## Reset MongoDB database
	@echo "🗑️  Resetting database..."
	docker-compose exec mongodb mongosh cloud_marketdata --eval "db.dropDatabase()"
	@echo "✅ Database reset completed."

db-backup: ## Backup MongoDB database
	@echo "💾 Creating database backup..."
	docker-compose exec mongodb mongodump --db cloud_marketdata --out /tmp/backup
	@echo "✅ Backup created in container:/tmp/backup"

# Environment Setup
setup: ## Setup development environment
	@echo "⚙️  Setting up development environment..."
	@if [ ! -f .env ]; then cp .env.example .env; echo "📝 Created .env file"; fi
	@echo "✅ Development environment setup completed."
	@echo "Run 'make dev' to start development services."

# Quick Status
status: ## Show service status and health
	@echo "📊 Cloud MarketData Status"
	@echo "========================="
	@echo "Docker Containers:"
	@docker-compose ps
	@echo ""
	@echo "Application Health:"
	@make health
	@echo ""
	@echo "Quick Access:"
	@echo "  - App: http://localhost:8000"
	@echo "  - Health: http://localhost:8000/health"
	@echo "  - Docs: http://localhost:8000/docs"
