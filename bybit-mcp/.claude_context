# ü§ñ Contexto para Claude/Cursor - Bybit MCP Server

## IMPORTANTE: Leer ANTES de dar cualquier sugerencia

### üìä SISTEMA DE TRAZABILIDAD (OBLIGATORIO)
**SIEMPRE** revisar y actualizar estos archivos:
- `claude/master-log.md` - Estado actual del MCP (LEER PRIMERO)
- `claude/tasks/task-tracker.md` - Pr√≥ximas funciones a implementar
- `ROADMAP_AVANZADO.md` - Visi√≥n general de funcionalidades futuras
- `claude/logs/YYYY-MM-DD.md` - Log diario (ACTUALIZAR al final)

### Arquitectura del MCP
- **Tipo**: Model Context Protocol Server
- **Lenguaje**: TypeScript
- **Runtime**: Node.js
- **Dependencias**: @modelcontextprotocol/sdk, node-fetch
- **API**: Bybit v5 (endpoints p√∫blicos)

### ESTADO ACTUAL (v1.1.0 - 08/06/2025)
- **Fase:** Funcional con an√°lisis de volumen
- **√öltima Actualizaci√≥n:** Volume Delta y an√°lisis tradicional agregados
- **Pr√≥xima Tarea:** Support/Resistance din√°micos (TASK-002)
- **Bloqueadores:** Ninguno

### Funcionalidades EXISTENTES
- ‚úÖ Precios en tiempo real (get_ticker)
- ‚úÖ Orderbook depth (get_orderbook)
- ‚úÖ Datos OHLCV hist√≥ricos (get_klines)
- ‚úÖ An√°lisis de volatilidad (analyze_volatility)
- ‚úÖ Sugerencias de grid trading (suggest_grid_levels)
- ‚úÖ An√°lisis de volumen con VWAP (get_volume_analysis)
- ‚úÖ Volume Delta y divergencias (get_volume_delta)

### En DESARROLLO
- üöß Support/Resistance autom√°ticos
- üöß Detecci√≥n de patrones Wyckoff b√°sicos

### NO EXISTE (no sugerir a√∫n)
- ‚ùå Funciones que requieren API Key
- ‚ùå Trading automatizado
- ‚ùå Gesti√≥n de √≥rdenes
- ‚ùå Portfolio tracking

### Integraci√≥n con Waickoff AI
- Este MCP servir√° como capa de datos para Waickoff
- Mantener separaci√≥n: MCP = datos, Waickoff = inteligencia
- Futuro: m√∫ltiples MCPs (Binance, etc.) alimentando Waickoff

### WORKFLOW OBLIGATORIO:
1. Leer ROADMAP_AVANZADO.md para entender visi√≥n
2. Revisar claude/tasks/task-tracker.md para pr√≥xima tarea
3. Implementar siguiendo arquitectura actual
4. ACTUALIZAR logs con cambios realizados
5. Compilar y probar antes de declarar completado

### Reglas al dar c√≥digo:
1. **TypeScript estricto** - Tipos definidos siempre
2. **Manejo de errores** - Try/catch en todas las funciones
3. **Datos p√∫blicos** - NO usar endpoints que requieran API key (por ahora)
4. **Documentaci√≥n** - Comentarios claros en funciones nuevas
5. **Retrocompatibilidad** - No romper funciones existentes

### Comandos de desarrollo:
```bash
npm run build   # Compilar TypeScript
npm run dev     # Modo desarrollo con watch
npm start       # Ejecutar MCP compilado
npm run clean   # Limpiar build
```

### Configuraci√≥n Claude Desktop:
```json
{
  "mcpServers": {
    "bybit-mcp": {
      "command": "node",
      "args": ["D:\\projects\\mcp\\bybit-mcp\\build\\index.js"],
      "env": {}
    }
  }
}
```

### Filosof√≠a del proyecto:
- **"Datos limpios y precisos sobre features complejas"**
- **"Separaci√≥n clara: an√°lisis aqu√≠, trading en otro MCP"**
- **"Base s√≥lida para Waickoff AI"**
- **"Modular y extensible"**

## üéØ ENFOQUE ACTUAL: Mejorar an√°lisis t√©cnico
**PR√ìXIMA TAREA CR√çTICA**: Support/Resistance din√°micos basados en volumen
**REFERENCIA**: Ver ROADMAP_AVANZADO.md secci√≥n "FASE 1"

## üìã OBLIGATORIO AL TERMINAR CUALQUIER TRABAJO:
1. Actualizar versi√≥n en package.json si hay cambios significativos
2. Actualizar README.md si se agregan nuevas funciones
3. Crear/actualizar gu√≠as de uso para funciones nuevas
4. Documentar en logs cualquier decisi√≥n t√©cnica importante

**ESTE MCP ES LA BASE DE DATOS PARA WAICKOFF AI - MANTENER CALIDAD**