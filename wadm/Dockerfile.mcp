# MCP Server Dockerfile with HTTP Wrapper
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY mcp_server/package*.json ./

# Install ALL dependencies for build
RUN npm install --legacy-peer-deps

# Copy source files
COPY mcp_server/tsconfig*.json ./
COPY mcp_server/src ./src

# Build TypeScript
RUN npm run build && \
    echo "MCP Server built successfully" && \
    ls -la build/

# Final stage with Python for HTTP wrapper
FROM python:3.12-slim

WORKDIR /app

# Install Node.js and required tools
RUN apt-get update && apt-get install -y \
    curl \
    procps \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy built MCP server from builder
COPY --from=builder /app/build ./build
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy diagnostic script
COPY mcp_server/diagnose.sh ./
RUN chmod +x diagnose.sh

# Copy .env.example as .env if needed
COPY mcp_server/.env.example ./.env

# Copy HTTP wrapper
COPY mcp_server/http_wrapper.py ./
COPY mcp_server/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Run diagnostics during build
RUN echo "Running diagnostics..." && \
    ./diagnose.sh

# Create non-root user
RUN useradd --create-home --shell /bin/bash mcp && \
    chown -R mcp:mcp /app

USER mcp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose HTTP wrapper port
EXPOSE 3000

# Start HTTP wrapper (which starts MCP server)
CMD ["python", "http_wrapper.py"]
