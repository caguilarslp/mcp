# 🤖 WADM - wAIckoff Data Manager Context

## 📋 Estado Actual
- **Versión:** v0.1.0
- **Fecha:** 17/06/2025
- **Status:** Listo para VPS - Setup completado y optimizado
- **Fase Actual:** Desarrollo - Collectors implementados
- **Última Tarea:** [TASK-002] Sistema de WebSocket Collectors ✅

## 🎯 Objetivo del Proyecto
Sistema de recolección y distribución de indicadores de mercado (Volume Profile y Order Flow) para alimentar el ecosistema wAIckoff con datos procesados de alta calidad.

## 🏗️ Arquitectura
- **VPS con Docker**: Collectors (Binance/Bybit) → MongoDB → MCP Server
- **Clientes locales**: MCP Client → Cache en waickoff_reports/indicators/
- **Seguridad**: API Keys + HTTPS + MongoDB interno (solo localhost)
- **Simplicidad**: Un solo requirements.txt, Docker Compose optimizado

## 📁 Estructura del Proyecto
```
wadm/
├── claude/              # Sistema completo de trazabilidad
│   ├── master-log.md   # Log principal del proyecto
│   ├── tasks/          # Gestión de tareas
│   ├── adr/           # Architecture Decision Records
│   ├── docs/          # Documentación técnica nueva
│   │   ├── arquitectura-simplificada.md
│   │   ├── deployment-vps.md
│   │   └── api-reference.md
│   ├── logs/          # Logs diarios
│   ├── bugs/          # Bug tracking
│   └── lessons-learned/ # Conocimiento acumulado
├── docs/               # Documentación técnica
│   ├── trazabilidad/  # Sistema anterior (migrado)
│   └── arquitectura/  # Diseños técnicos
├── docker/            # Docker Compose y configs
├── src/               # Código fuente
│   ├── core/          # Entidades y tipos
│   ├── infrastructure/ # Collectors y adaptadores
│   │   └── collectors/ # WebSocket collectors
│   ├── application/   # Casos de uso
│   └── presentation/  # API y MCP
├── tests/             # Tests unitarios
│   └── infrastructure/collectors/ # Tests de collectors
├── examples/          # Ejemplos de uso
├── requirements.txt   # Dependencias simplificadas
├── docker-compose.yml # Setup VPS-ready
├── Dockerfile         # Imagen optimizada
├── Makefile           # Comandos esenciales
├── verify_setup.py    # Script de verificación
└── .env.example       # Variables mínimas
```

## ✅ Decisiones Tomadas
- MongoDB para time-series data
- WebSocket para recolección
- MCP Protocol para distribución
- Docker Compose para deployment
- API Keys para autenticación
- **Puerto API**: 8920 (no estándar, evita conflictos con Plesk)
- **URLs**: https://tu-dominio.com:8920/* (con SSL)

## ❓ Decisiones Pendientes
1. Timeframes a soportar (¿solo 1h o multi-timeframe?)
2. Símbolos iniciales (¿BTC, ETH, SOL o más?)
3. Frecuencia de actualización cliente (¿1min, 5min?)
4. Retención de datos (¿7d, 30d?)
5. Procesamiento: ¿buffer memoria o Redis Streams?

## 📊 Indicadores a Implementar
**Volume Profile**: POC, VAH, VAL, distribución por precio
**Order Flow**: Delta, Delta acumulativo, Imbalance ratio, Large trades

## 🔧 Stack Tecnológico
- Python 3.11 (collectors)
- TypeScript (MCP server/client)
- MongoDB (storage)
- Docker + Nginx (deployment)
- WebSocket (data feeds)

## 📈 Progreso: 25% (2/8 tareas completadas)

## 🚀 Próximos Pasos
1. [TASK-003] Schemas MongoDB y modelos de datos (3h) - Próxima tarea
2. [TASK-004] Volume Profile service (4h)
3. [TASK-005] Order Flow analyzer (4h)

## 📝 Archivos Clave
- `claude/master-log.md` - Historial completo del proyecto
- `claude/tasks/task-tracker.md` - Estado de todas las tareas
- `claude/adr/` - Decisiones arquitectónicas
- `claude/docs/` - Documentación técnica nueva
  - `arquitectura-simplificada.md` - Diseño del sistema
  - `deployment-vps.md` - Guía de deployment
  - `api-reference.md` - Referencia de API
- `requirements.txt` - Dependencias simplificadas
- `docker-compose.yml` - Setup VPS-ready

---
*Contexto mínimo para desarrollo del proyecto WADM*
