"""
Quick test for TASK-031 Phase 2 - Volume Profile & Order Flow Services
Test real calculation logic with enhanced features
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.api.services import VolumeProfileService, OrderFlowService
from src.storage.mongo_manager import MongoManager
from src.api.cache import CacheManager
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_phase2_services():
    """Test the enhanced Volume Profile and Order Flow services"""
    print(\"\\nüéØ TASK-031 PHASE 2 - Testing Enhanced Services\")\n    print(\"=\" * 50)\n    \n    # Initialize components\n    print(\"üìä Initializing services...\")\n    mongo = MongoManager()\n    cache = CacheManager()\n    \n    vp_service = VolumeProfileService(mongo, cache)\n    of_service = OrderFlowService(mongo, cache)\n    \n    symbol = \"BTCUSDT\"\n    exchange = \"bybit\"\n    \n    print(f\"‚úÖ Services initialized for {symbol} on {exchange}\")\n    \n    # Test Volume Profile Service\n    print(\"\\nüìà Testing Volume Profile Service...\")\n    try:\n        # Test latest data\n        vp_latest = await vp_service.get_latest(symbol, exchange)\n        if vp_latest:\n            print(f\"‚úÖ Latest VP: POC={vp_latest['poc']:.2f}, VAH={vp_latest['vah']:.2f}, VAL={vp_latest['val']:.2f}\")\n            print(f\"   Volume Nodes: {len(vp_latest.get('volume_nodes', []))} levels\")\n            print(f\"   Profile Strength: {vp_latest.get('profile_strength', 0):.1f}/100\")\n        else:\n            print(\"‚ö†Ô∏è  No latest VP data found\")\n        \n        # Test realtime calculation\n        vp_realtime = await vp_service.calculate_realtime(symbol, exchange, 60)\n        if vp_realtime:\n            print(f\"‚úÖ Realtime VP (1h): POC={vp_realtime['poc']:.2f}, Trades={vp_realtime.get('trades_count', 0)}\")\n            print(f\"   Total Volume: {vp_realtime['total_volume']:.2f}\")\n        else:\n            print(\"‚ö†Ô∏è  No realtime VP calculation possible\")\n        \n        # Test multi-timeframe\n        vp_multi = await vp_service.get_multi_timeframe(symbol, exchange)\n        if vp_multi and 'timeframes' in vp_multi:\n            print(f\"‚úÖ Multi-timeframe VP: {len(vp_multi['timeframes'])} timeframes available\")\n            for tf, data in vp_multi['timeframes'].items():\n                if data:\n                    print(f\"   {tf}: POC={data['poc']:.2f}, Strength={data.get('profile_strength', 0):.1f}\")\n        else:\n            print(\"‚ö†Ô∏è  No multi-timeframe VP data\")\n    \n    except Exception as e:\n        print(f\"‚ùå Volume Profile Service error: {e}\")\n    \n    # Test Order Flow Service\n    print(\"\\nüíπ Testing Order Flow Service...\")\n    try:\n        # Test latest data\n        of_latest = await of_service.get_latest(symbol, exchange)\n        if of_latest:\n            print(f\"‚úÖ Latest OF: Delta={of_latest['delta']:.2f}, Cumulative={of_latest['cumulative_delta']:.2f}\")\n            print(f\"   Momentum Score: {of_latest.get('momentum_score', 50):.1f}/100\")\n            print(f\"   Market Bias: {of_latest.get('market_bias', 'neutral')}\")\n            print(f\"   Absorption Events: {len(of_latest.get('absorption_events', []))}\")\n        else:\n            print(\"‚ö†Ô∏è  No latest OF data found\")\n        \n        # Test realtime calculation\n        of_realtime = await of_service.calculate_realtime(symbol, exchange, 15)\n        if of_realtime:\n            print(f\"‚úÖ Realtime OF (15m): Delta={of_realtime['delta']:.2f}, Trades={of_realtime.get('trades_count', 0)}\")\n            print(f\"   Buy Volume: {of_realtime['buy_volume']:.2f}, Sell Volume: {of_realtime['sell_volume']:.2f}\")\n            print(f\"   Flow Strength: {of_realtime.get('flow_strength', 50):.1f}/100\")\n            print(f\"   Institutional Volume: {of_realtime.get('institutional_volume', 0):.2f}\")\n            \n            exhaustion = of_realtime.get('exhaustion_signals', [])\n            if exhaustion:\n                print(f\"   ‚ö†Ô∏è  Exhaustion Signals: {', '.join(exhaustion)}\")\n        else:\n            print(\"‚ö†Ô∏è  No realtime OF calculation possible\")\n        \n        # Test comprehensive analysis\n        of_analysis = await of_service.get_flow_analysis(symbol, exchange)\n        if of_analysis:\n            print(f\"‚úÖ Flow Analysis: Overall Bias={of_analysis.get('overall_bias', 'neutral')}\")\n            print(f\"   Confluence Score: {of_analysis.get('confluence_score', 50):.1f}/100\")\n            print(f\"   Key Levels: {len(of_analysis.get('key_levels', []))}\")\n            print(f\"   Alerts: {len(of_analysis.get('alerts', []))}\")\n            \n            # Show timeframe breakdown\n            timeframes = of_analysis.get('timeframes', {})\n            for tf, data in timeframes.items():\n                if data:\n                    bias = data.get('market_bias', 'neutral')\n                    momentum = data.get('momentum_score', 50)\n                    print(f\"   {tf}: {bias} (momentum: {momentum:.1f})\")\n        else:\n            print(\"‚ö†Ô∏è  No flow analysis available\")\n    \n    except Exception as e:\n        print(f\"‚ùå Order Flow Service error: {e}\")\n    \n    # Test Database Stats\n    print(\"\\nüìä Database Statistics:\")\n    try:\n        stats = mongo.get_database_stats()\n        if stats.get('connected'):\n            print(f\"‚úÖ MongoDB: {stats.get('trades_count', 0)} trades, {stats.get('volume_profiles_count', 0)} VPs, {stats.get('order_flows_count', 0)} OFs\")\n        else:\n            print(\"‚ö†Ô∏è  MongoDB not connected - using mock mode\")\n    except Exception as e:\n        print(f\"‚ö†Ô∏è  Database stats error: {e}\")\n    \n    # Test Cache Performance\n    print(\"\\nüíæ Cache Performance:\")\n    try:\n        if cache.redis_available:\n            print(\"‚úÖ Redis cache: Available\")\n        else:\n            print(\"‚ö†Ô∏è  Redis cache: Using in-memory fallback\")\n    except Exception as e:\n        print(f\"‚ö†Ô∏è  Cache test error: {e}\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"üéØ TASK-031 PHASE 2 Testing Complete!\")\n    print(\"\\nüìã Summary:\")\n    print(\"‚úÖ Volume Profile Service: Enhanced with realtime calculation\")\n    print(\"‚úÖ Order Flow Service: Enhanced with momentum scoring & exhaustion detection\")\n    print(\"‚úÖ Multi-timeframe Analysis: Available for both indicators\")\n    print(\"‚úÖ Cache Integration: Hybrid Redis + in-memory system\")\n    print(\"‚úÖ MongoDB Integration: Async methods with fallback support\")\n    \n    # Cleanup\n    if mongo:\n        mongo.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(test_phase2_services())\n