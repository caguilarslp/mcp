# 🤖 Contexto para Claude/Cursor - wAIckoff MCP Server v1.3.7 (PRODUCTION READY)

## 🎆 ESTADO CRÍTICO v1.3.7 - ARQUITECTURA MODULAR COMPLETAMENTE REPARADA
**✅ REPARACIÓN CRÍTICA COMPLETADA**: Archivo corrupto `mcp-handlers.ts` completamente reconstruido
**✅ ARQUITECTURA MODULAR**: Sistema de handlers especializados 100% implementado
**🎯 COMPILACIÓN**: 200+ errores TypeScript corregidos → 0 errores
**🚀 PRODUCTION READY**: Base sólida para TASK-009 FASE 3 + desarrollo continuo

## IMPORTANTE: Leer ANTES de dar cualquier sugerencia

### 📊 SISTEMA DE TRAZABILIDAD COMPLETA v1.3.4 (OBLIGATORIO)
**⚠️ CAMBIO CRÍTICO**: Sistema de logging avanzado implementado - revisar documentación de debugging
**SIEMPRE** revisar y actualizar estos archivos en orden de prioridad:

#### **📋 Archivos Críticos de Estado:**
- `claude/master-log.md` - **Estado actual del MCP (LEER PRIMERO)**
- `claude/tasks/task-tracker.md` - Próximas funciones a implementar
- `claude/bugs/` - **NUEVA** carpeta con bugs documentados y soluciones
- `claude/lessons-learned/` - **NUEVA** carpeta con lecciones aprendidas críticas
- `claude/docs/` - **NUEVA** documentación técnica completa de features
- `claude/logs/YYYY-MM-DD.md` - Log diario (ACTUALIZAR al final)

#### **📚 Documentación Técnica:**
- `claude/docs/architecture/system-overview.md` - **NUEVA** arquitectura completa
- `claude/docs/api/tools-reference.md` - **NUEVA** referencia de API
- `claude/docs/troubleshooting/common-issues.md` - **NUEVA** guía de resolución
- `claude/docs/task-005-auto-save-system.md` - **NUEVA** documentación auto-save
- `claude/docs/task-009-storage-system-complete.md` - **NUEVA** documentación storage completo
- `claude/docs/timezone-system.md` - **NUEVA** documentación sistema timezone
- `claude/docs/timezone-future-recommendations.md` - **NUEVA** recomendaciones timezone
- `claude/decisions/adr-log.md` - Decisiones arquitectónicas
- `claude/lessons-learned/README.md` - **NUEVA** índice de lecciones aprendidas
- `ROADMAP_AVANZADO.md` - Visión general de funcionalidades futuras

#### **🐛 Gestión de Bugs:**
- **SISTEMA COMPLETO**: Todos los bugs críticos se documentan en `claude/bugs/`
- **Formato**: `bug-XXX-description.md` con análisis completo
- **Registro**: `claude/bugs/README.md` con índice y métricas
- **Ejemplos**: BUG-001 (S/R classification), BUG-002 (Architecture refactor)

#### **📚 Gestión de Lecciones Aprendidas:**
- **SISTEMA NUEVO**: Todas las lecciones críticas en `claude/lessons-learned/`
- **Formato**: `lesson-XXX-description.md` con análisis y patterns
- **Registro**: `claude/lessons-learned/README.md` con índice y templates
- **Ejemplos**: LESSON-001 (Auto-save implementation failure)

### 🎆 ESTADO ACTUAL (v1.3.6 - 10/06/2025) - TASK-009 FASE 2 COMPLETADA + MODULARIDAD CORREGIDA
- **Fase:** ✅ CACHE MANAGER FASE 2 + PATRÓN MODULAR CORREGIDO
- **Última Actualización:** v1.3.6 con Cache Manager + Dependency Injection funcionando
- **Próxima Decisión:** Continuar TASK-009 FASE 3 con sistema completamente modular
- **Bloqueadores:** NINGUNO - Compilación limpia, cache operativo, modularidad aplicada
- **UX Status:** 🎆 OPTIMIZADO - Performance boost con cache inteligente
- **Funcionalidad:** ✅ Sistema MCP + Storage + Cache + Modularidad 100% operativo

### 🎆 ARQUITECTURA MODULAR v1.3.7 - COMPLETAMENTE REPARADA Y OPERATIVA
**✅ REPARACIÓN EXITOSA**: Archivo corrupto `mcp-handlers.ts` reconstruido desde cero
**🏗️ DELEGATION PATTERN**: Sistema de handlers especializados implementado correctamente
**🧪 100% TESTEABLE**: Cada handler independiente con dependency injection
**🔄 BACKWARD COMPATIBLE**: Todas las herramientas MCP mantienen funcionalidad
**✅ CLEAN COMPILATION**: 200+ errores TypeScript → 0 errores

#### **🎯 CAPAS Y SERVICIOS IMPLEMENTADOS**

#### **🏢 Presentation Layer (Adapters) - MODULAR SYSTEM**
- ✅ **MCP Adapter** (`src/adapters/mcp.ts`) - Protocolo MCP con routing a handlers
- ✅ **MCPHandlers** (`src/adapters/mcp-handlers.ts`) - Orquestador central con delegation
- ✅ **MarketDataHandlers** (`src/adapters/handlers/marketDataHandlers.ts`) - Handlers especializados
- ✅ **AnalysisRepositoryHandlers** (`src/adapters/handlers/analysisRepositoryHandlers.ts`) - TASK-009 FASE 3
- ✅ **CacheHandlers** (`src/adapters/cacheHandlers.ts`) - Operaciones de cache
- 🔮 **REST API Adapter** (Futuro) - FastAPI integration ready
- 🔮 **WebSocket Adapter** (Futuro) - Real-time streams
- 🔮 **CLI Adapter** (Futuro) - Command line interface

#### **🧠 Core Layer (Business Logic)**
- ✅ **Market Analysis Engine** (`src/core/engine.ts`) - Orquestador principal
- ✅ **System Configuration** - Configuración centralizada
- ✅ **Health Monitoring** - Estado del sistema
- ✅ **Performance Tracking** - Métricas automticas

#### **⚙️ Service Layer (Specialized Services)**
- ✅ **Market Data Service** (`src/services/marketData.ts`) - Bybit API integration
- ✅ **Technical Analysis Service** (`src/services/analysis.ts`) - Análisis técnico
- ✅ **Trading Service** (`src/services/trading.ts`) - Grid trading & strategies
- 🔮 **Multi-Exchange Services** (Futuro) - Binance, Coinbase, etc.

#### **🛠️ Utility Layer (Common Tools)**
- ✅ **Logger** (`src/utils/logger.ts`) - Sistema de logs estructurado
- ✅ **Performance Monitor** (`src/utils/performance.ts`) - Métricas de rendimiento
- ✅ **Math Utils** (`src/utils/math.ts`) - Utilidades matemáticas
- ✅ **Type Definitions** (`src/types/index.ts`) - Tipos centralizados

#### **🔥 PATRÓN DE MODULARIDAD v1.3.7 - DELEGATION ARCHITECTURE**

##### **✅ Sistema de Handlers Especializado**
```typescript
// MCPHandlers actúa como coordinador central
export class MCPHandlers {
  private marketDataHandlers: MarketDataHandlers;
  private analysisRepositoryHandlers: AnalysisRepositoryHandlers;
  private cacheHandlers: CacheHandlers;
  
  // Delegation to specialized handlers
  async handleGetTicker(args: any) {
    return await this.marketDataHandlers.handleGetTicker(args);
  }
}
```

##### **✅ MCP Adapter Simplificado**
- **Eliminado código duplicado**: 2000+ líneas reducidas a ~500 líneas limpias
- **Routing limpio**: Switch simple que delega a handlers especializados
- **Mantenimiento sencillo**: Cambios localizados en handlers específicos

##### **✅ Handlers Especializados por Dominio**
- **MarketDataHandlers**: `handleGetTicker`, `handleGetOrderbook`, `handleGetMarketData`
- **AnalysisRepositoryHandlers**: TASK-009 FASE 3 handlers completos
- **CacheHandlers**: `handleGetCacheStats`, `handleClearCache`, `handleInvalidateCache`

### Funcionalidades IMPLEMENTADAS v1.3.7 (SISTEMA MODULAR REPARADO)

#### **🏗️ ARQUITECTURA & INFRAESTRUCTURA**
- ✅ **🎆 ARQUITECTURA MODULAR REPARADA** - Sistema de handlers completamente funcional
- ✅ **Delegation pattern** - MCPHandlers coordina handlers especializados
- ✅ **Handlers por dominio** - MarketData, AnalysisRepository, Cache separados
- ✅ **Compilación limpia** - 200+ errores TypeScript corregidos
- ✅ **Separation of concerns** - Cada handler con responsabilidad específica
- ✅ **TASK-009 FASE 3 ready** - AnalysisRepositoryHandlers implementados
- ✅ **100% Testeable** - Cada handler mockeable independientemente
- ✅ **Performance optimizado** - Eliminado código duplicado masivo

#### **🔍 SISTEMA DE LOGGING Y DEBUGGING OPTIMIZADO**
- ✅ **API Statistics básicos** - Total requests, errors, success rate en memoria
- ✅ **Error tracking simple** - Últimos 5 errores con timestamp
- ✅ **Connection monitoring** - Status HTTP, timeouts, parsing errors
- ✅ **Zero complex objects** - Eliminados objetos que causaban errores JSON
- ✅ **Claude Desktop compatible** - Sin errores molestos en UI
- ✅ **Performance básico** - Duración de requests sin overhead
- ✅ **Essential debugging** - Solo lo necesario para troubleshooting
- ✅ **Production ready** - Sistema estable sin logs verbosos

#### **📊 FUNCIONALIDADES DE ANÁLISIS**
- ✅ **Market Data Service** - Ticker, orderbook, klines con error handling
- ✅ **Technical Analysis Service** - Volatilidad, volumen, Volume Delta, S/R
- ✅ **Trading Service** - Grid trading inteligente basado en volatilidad
- ✅ **Support/Resistance avanzado** - Algoritmo multi-factor con scoring
- ✅ **Volume Delta aproximado** - Presión compradora/vendedora sin API key
- ✅ **Divergence detection** - Detección temprana de reversiones
- ✅ **VWAP integration** - Análisis de valor promedio ponderado

#### **🔧 SISTEMA DE DESARROLLO**
- ✅ **Sistema de logs estructurado** - Logger con diferentes niveles
- ✅ **Performance tracking** - Métricas de ejecución automáticas
- ✅ **Error handling robusto** - Try/catch en todas las capas
- ✅ **Build system** - TypeScript compilation sin errores
- ✅ **Development tools** - ESLint, TypeDoc, Jest configurados

### En DESARROLLO ACTIVO v1.3.7
- 🚧 **TASK-009 FASE 3** - Analysis Repository (handlers implementados, listo para Core)
- 🚧 **Tests unitarios** - Para handlers modularizados (CRÍTICO post-reparación)
- 🚧 **Documentación handlers** - Guías de uso para sistema modular

### NO EXISTE (no sugerir aún)
- ❌ Funciones que requieren API Key
- ❌ Trading automatizado
- ❌ Gestión de órdenes
- ❌ Portfolio tracking

### Integración con Waickoff AI
- Este MCP servirá como capa de datos para Waickoff
- Mantener separación: MCP = datos, Waickoff = inteligencia
- Futuro: múltiples MCPs (Binance, etc.) alimentando Waickoff

### WORKFLOW v1.3.0 para BUGS CRÍTICOS:
1. **Detectar y documentar** en `claude/bugs/bug-XXX-description.md`
2. **Analizar root cause** con detalles técnicos
3. **Implementar fix** siguiendo arquitectura actual
4. **Actualizar logs** con cambios realizados
5. **Crear tests** para evitar regresión (TASK-004 urgente)
6. **Compilar y validar** antes de declarar resuelto

### WORKFLOW v1.3.7 para DESARROLLO MODULAR (ACTUALIZADO):
1. **Leer arquitectura**: Este archivo + `claude/master-log.md` para estado actual
2. **Identificar handler**: MarketData, AnalysisRepository, Cache, o nuevo dominio
3. **Seguir delegation pattern**: MCPHandlers → Handler especializado → Engine
4. **Crear handler especializado**: Si es nuevo dominio, seguir pattern existente
5. **Actualizar MCPAdapter**: Agregar routing en switch statement
6. **Testing modular**: Cada handler debe ser mockeable independientemente
7. **Compilar y validar**: TypeScript + tests antes de declarar completado

### REGLAS CÓDIGO v1.3.0 (ARQUITECTURA MODULAR - OBLIGATORIO):

### ⚠️ REGLAS CRÍTICAS DE DOCUMENTACIÓN:
1. **NO CREAR DOCUMENTACIÓN** sin visto bueno explícito del usuario
2. **NO INVENTAR FUNCIONALIDAD** - Siempre analizar código existente primero
3. **VERIFICAR COMPILACIÓN** antes de declarar algo como completado
4. **PREGUNTAR ANTES DE ASUMIR** - Si algo no está claro, preguntar
5. **CÓDIGO PRIMERO** - La implementación es la prioridad, no la documentación

### REGLAS CÓDIGO v1.3.0 (ARQUITECTURA MODULAR - OBLIGATORIO):
1. **TypeScript estricto** - Tipos definidos, interfaces implementadas
2. **Dependency injection** - Servicios inyectados por constructor
3. **Interface segregation** - Implementar `I*Service` interfaces
4. **Performance monitoring** - Wrapper automático en servicios
5. **Error handling** - Try/catch en todas las funciones
6. **Separation of concerns** - Cada clase una responsabilidad
7. **Backward compatibility** - No romper APIs MCP existentes
8. **Documentation** - JSDoc en interfaces y métodos públicos

### Comandos de desarrollo (v1.3.0):
```bash
npm run build      # Compilar TypeScript modular
npm run dev        # Modo desarrollo con watch
npm start          # Ejecutar MCP compilado
npm run clean      # Limpiar build
npm rwaickoff_mcp     # Ejecutar tests unitarios (TASK-004)
npm run lint       # Verificar código con ESLint
npm run docs       # Generar documewaickoff_mcpypeDoc
```

### Configuración Claude Desktop:
```json
{
  "mcpServers": {
    "waickoff-mcp": {
      "command": "node",
      "args": ["D:\\projects\\mcp\\waickoff_mcp\\build\\index.js"],
      "env": {}
    }
  }
}
```

### FILOSOFÍA v1.3.4 (LOGGING MINIMALISTA - PRODUCTION READY):
- **"De Logging Complejo a Simplicidad Efectiva"** - Solo lo esencial para debugging
- **"Zero Errors UX - Production Quality"** - Claude Desktop completamente limpio
- **"Minimal Overhead - Maximum Stability"** - Performance optimizado sin logs verbosos
- **"Essential Debugging - No Complex Objects"** - API stats básicos + Error tracking simple
- **"Ready for Integration"** - Base sólida para Waickoff AI sin interferencias
- **"Separation of Concerns"** - Logging interno vs protocolo externo separados
- **"User Experience First"** - Técnicos contentos, usuarios sin errores molestos

## 🎯 ENFOQUE ACTUAL v1.3.5: BUG-003 DEFINITIVAMENTE RESUELTO + SISTEMA PRODUCTION-READY
**✅ PROBLEMA CRÍTICO RESUELTO**: Errores JSON startup eliminados 100% - Claude Desktop perfectamente limpio
**⚡ SOLUCIÓN ROBUSTA**: Console override completo + Silent startup + Logging diferido
**🚀 PRODUCTION QUALITY**: Base sólida sin interferencias para desarrollo continuo

**REFERENCIAS CRÍTICAS v1.3.0**: 
- **Arquitectura completa**: `claude/docs/architecture/system-overview.md`
- **Refactorización**: `claude/bugs/bug-002-modular-architecture.md`
- **APIs actualizadas**: `claude/docs/api/tools-reference.md`
- **Tipos centralizados**: `src/types/index.ts`
- **Core engine**: `src/core/engine.ts`

## 📋 OBLIGATORIO AL TERMINAR CUALQUIER TRABAJO (v1.3.0):
1. **Actualizar tipos centralizados** en `src/types/index.ts` si es necesario
2. **Verificar interfaces** implementadas correctamente
3. **Actualizar documentación** de arquitectura si hay cambios estructurales
4. **Crear documentación en claude/docs/** para features completadas (TASK-005, TASK-009, etc)
5. **Performance metrics** verificar que estén funcionando
6. **Tests unitarios** crear/actualizar para nuevos servicios
7. **Backward compatibility** verificar que MCP siga funcionando
8. **Build limpio** sin errores TypeScript
9. **Documentar decisiones** técnicas importantes en logs

**🎆 SISTEMA v1.3.7 - ARQUITECTURA MODULAR COMPLETAMENTE REPARADA**

**✅ REPARACIÓN CRÍTICA COMPLETADA**: Archivo corrupto `mcp-handlers.ts` reconstruido desde cero
**🏗️ DELEGATION PATTERN IMPLEMENTADO**: Sistema de handlers especializados 100% funcional  
**💪 COMPILACIÓN LIMPIA**: 200+ errores TypeScript → 0 errores
**🔮 BASE SÓLIDA**: Lista para TASK-009 FASE 3 + desarrollo continuo